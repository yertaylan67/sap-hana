steps:
  - script: |
      set -e

      echo "=== Logon deployer ==="
      ssh -i ~/.ssh/id_rsa -o StrictHostKeyChecking=no -o ConnectTimeout=$(ssh_timeout_s) "$(username)"@"$(publicIP)" '
      source /etc/profile.d/deploy_server.sh

      # Modify environment value so it starts with u and with length of 5
      deployer_env=${{parameters.deployer_env}}
      buildId=$(Build.BuildId)
      deployer_isRelease=${deployer_env%%$buildId*}

      if [ -z "${deployer_isRelease}" ]
      then 
        deployer_prefix="U$(echo $(Build.BuildId) | rev | cut -c1-4 | rev)"
      else
        deployer_prefix=${deployer_env}
      fi

      deployer_rg="${deployer_prefix}-EAUS-DEP00-INFRASTRUCTURE"

      # Modify environment value so it starts with u and with length of 5
      saplib_env=${{parameters.saplib_env}}
      saplib_isRelease=${saplib_env%%$buildId*}

      if [ -z "${saplib_isRelease}" ]
      then 
        saplib_prefix="U$(echo $(Build.BuildId) | rev | cut -c1-4 | rev)"
      else
        saplib_prefix=${saplib_env}
      fi

      saplib_rg="${saplib_prefix}-EAUS-SAP_LIBRARY"

      # Modify environment value so it starts with u and with length of 5
      saplandscape_env=${{parameters.saplandscape_env}}
      saplandscape_isRelease=${saplandscape_env%%$buildId*}

      [ -z ${{parameters.osImage_publisher}} ] && osImage_publisher="SUSE" || osImage_publisher=${{parameters.osImage_publisher}}
      [[ ${osImage_publisher} == "SUSE" ]] && isSles=true || isSles=false
      
      # subnet is decided by buildId if it is unit test.
      # Otherwise, use 10.10.0.0 for sles and 10.10.1.0 for rhel
      if [ -z "${saplandscape_isRelease}" ]
      then 
        idx1=${buildId: -1}
        idx2=$((${buildId: -2:1} + 1))
        idx=$((10#$idx2$idx1))
        saplandscape_prefix="U$(echo $(Build.BuildId) | rev | cut -c1-4 | rev)"
        ha="false"
      else
        saplandscape_prefix=${saplandscape_env}
        ha="true"
        if ${isSles}
        then idx=11
        else idx=12
        fi
      fi
      sap_vnet_address_space="10.${idx}.0.0/16"
      subnet_iscsi_prefix="10.${idx}.${idx}.64/27"

      saplandscape_rg="${saplandscape_prefix}-EAUS-SAP0-INFRASTRUCTURE"
      
      repo_dir=$HOME/${saplandscape_rg}/sap-hana
      ws_dir=$HOME/Azure_SAP_Automated_Deployment/WORKSPACES/SAP_LANDSCAPE/${saplandscape_rg}
      deployer_ws_dir=$HOME/Azure_SAP_Automated_Deployment/WORKSPACES/LOCAL/${deployer_rg}
      input=${ws_dir}/${saplandscape_rg}.json
      
      echo "=== Checkout required branch ${{parameters.branch_name}} ==="
      if [ ! -d "${repo_dir}" ]
      then
        mkdir $HOME/${saplandscape_rg}; cd $_
        git clone https://github.com/Azure/sap-hana.git
      fi
      cd $repo_dir && git pull && git checkout ${{parameters.branch_name}}

      echo "=== Create workspace ${ws_dir} ==="
      mkdir -p ${ws_dir}; cd $_
      cp ${deployer_ws_dir}/ssh* .

      cat <<- EOF > export-clustering-sp-details.sh
        export SAP_HANA_FENCING_AGENT_SUBSCRIPTION_ID=$(landscape-subscription)
        export SAP_HANA_FENCING_AGENT_TENANT_ID=$(landscape-tenant)
        export SAP_HANA_FENCING_AGENT_CLIENT_ID=$(hana-pipeline-spn-id)
        export SAP_HANA_FENCING_AGENT_CLIENT_SECRET=$(hana-pipeline-spn-pw)
      EOF

      tfstate_sa_name=$(az storage account list --resource-group ${saplib_rg} | jq -r "'".[] |  select(.name | contains(\\\"tfstate\\\")).name"'")
      sap_landscape_key="${saplandscape_rg}.terraform.tfstate"
      deployer_tfstate_key=$(az storage blob list --account-name ${tfstate_sa_name} --container-name tfstate --only-show-errors | jq -r "'".[] | select(.name | contains(\\\"DEP00-INFRASTRUCTURE\\\")).name"'")
      saplib_tfstate_key=$(az storage blob list --account-name ${tfstate_sa_name} --container-name tfstate --only-show-errors | jq -r "'".[] | select(.name | contains(\\\"LIBRARY\\\")).name"'")
      tfstate_resource_id=$(az storage account list --resource-group ${saplib_rg} | jq -r "'".[] | select(.name | contains(\\\"tfstate\\\")).id"'")

      # Store SPN in deployer KV
      echo "=== Store SPN in deployer KV ==="
      deployer_kv_name=$(az keyvault list --resource-group ${deployer_rg} | jq -r "'".[] | select(.name | contains(\\\"user\\\")).name"'")
      az keyvault secret set --vault-name ${deployer_kv_name} --name ${saplandscape_prefix}-client-id --value $(hana-pipeline-spn-id) --output none
      az keyvault secret set --vault-name ${deployer_kv_name} --name ${saplandscape_prefix}-client-secret --value $(hana-pipeline-spn-pw) --output none
      az keyvault secret set --vault-name ${deployer_kv_name} --name ${saplandscape_prefix}-subscription-id --value $(landscape-subscription) --output none
      az keyvault secret set --vault-name ${deployer_kv_name} --name ${saplandscape_prefix}-tenant-id --value $(landscape-tenant) --output none

      echo "=== Recovery SPN in deployer KV when rerun same build ==="
      az keyvault secret recover --vault-name ${deployer_kv_name} --name ${saplandscape_prefix}-client-id --output none
      az keyvault secret recover --vault-name ${deployer_kv_name} --name ${saplandscape_prefix}-client-secret --output none
      az keyvault secret recover --vault-name ${deployer_kv_name} --name ${saplandscape_prefix}-subscription-id --output none
      az keyvault secret recover --vault-name ${deployer_kv_name} --name ${saplandscape_prefix}-tenant-id --output none
      echo "=== Wait for 30s for secrets to be available === "
      sleep 30s

      cp ${repo_dir}/deploy/terraform/run/sap_landscape/saplandscape.json ${ws_dir}/saplandscape.json
      cat ${ws_dir}/saplandscape.json \
      | jq --arg saplandscape_rg "${saplandscape_rg}" .infrastructure.resource_group.name\ =\ \$saplandscape_rg \
      | jq --arg environment "${saplandscape_prefix}" .infrastructure.environment\ =\ \$environment \
      | jq --arg tfstate_resource_id "${tfstate_resource_id}" .tfstate_resource_id\ =\ \$tfstate_resource_id \
      | jq --arg deployer_tfstate_key "${deployer_tfstate_key}" .deployer_tfstate_key\ =\ \$deployer_tfstate_key \
      | jq --arg sap_vnet_address_space "${sap_vnet_address_space}" .infrastructure.vnets.sap.address_space\ =\ \$sap_vnet_address_space \
      | jq --arg subnet_iscsi_prefix "${subnet_iscsi_prefix}" .infrastructure.vnets.sap.subnet_iscsi.prefix\ =\ \$subnet_iscsi_prefix \
      > ${input}

      cat ${input}
      
      echo "=== Deploy sap landscape from deployer with terraform ==="
      echo "=== This may take quite a while, please be patient ==="
      terraform -version
      terraform init -upgrade=true -force-copy \
        --backend-config "resource_group_name=${saplib_rg}" \
        --backend-config "storage_account_name=${tfstate_sa_name}" \
        --backend-config "container_name=tfstate" \
        --backend-config "key=${sap_landscape_key}" \
        ${repo_dir}/deploy/terraform/run/sap_landscape/
      terraform apply -auto-approve -var-file=${input} ${repo_dir}/deploy/terraform/run/sap_landscape/
      '
    displayName: "Deploy new sap landscape: Branch ${{parameters.branch_name}}"
    condition: or(succeededOrFailed(), always())
    env:
      ARM_CLIENT_ID: $(hana-pipeline-spn-id)
      ARM_CLIENT_SECRET: $(hana-pipeline-spn-pw)
      ARM_TENANT_ID: $(landscape-tenant)
      ARM_SUBSCRIPTION_ID: $(landscape-subscription)
