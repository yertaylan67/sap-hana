steps:
  - script: |
      set -e

      echo "=== Logon deployer ==="
      ssh -i ~/.ssh/id_rsa -o StrictHostKeyChecking=no -o ConnectTimeout=$(ssh_timeout_s) "$(username)"@"$(publicIP)" '
      source /etc/profile.d/deploy_server.sh

      # Modify environment value so it starts with u and with length of 5
      deployer_env=${{parameters.deployer_env}}
      buildId=$(Build.BuildId)
      deployer_isRelease=${deployer_env%%$buildId*}

      if [ -z "${deployer_isRelease}" ]
      then 
        deployer_prefix="U$(echo $(Build.BuildId) | rev | cut -c1-4 | rev)"
      else
        deployer_prefix=${deployer_env}
      fi

      deployer_rg="${deployer_prefix}-EAUS-DEP00-INFRASTRUCTURE"

      # Modify environment value so it starts with u and with length of 5
      saplib_env=${{parameters.saplib_env}}
      saplib_isRelease=${saplib_env%%$buildId*}
      if [ -z "${saplib_isRelease}" ]
      then 
        saplib_prefix="U$(echo $(Build.BuildId) | rev | cut -c1-4 | rev)"
      else
        saplib_prefix=${saplib_env}
      fi

      saplib_rg="${saplib_prefix}-EAUS-SAP_LIBRARY"

      # Modify environment value so it starts with u and with length of 5
      saplandscape_env=${{parameters.saplandscape_env}}
      saplandscape_isRelease=${saplandscape_env%%$buildId*}
      if [ -z "${saplandscape_isRelease}" ]
      then 
        saplandscape_prefix="U$(echo $(Build.BuildId) | rev | cut -c1-4 | rev)"
      else
        saplandscape_prefix=${saplandscape_env}
      fi

      saplandscape_rg="${saplandscape_prefix}-EAUS-SAP0-INFRASTRUCTURE"
      saplandscape_sap_vnet_arm_id=$(az network vnet list --resource-group ${saplandscape_rg} | jq -r .[].id)
      saplandscape_sap_vnet_prefix=$(az network vnet list --resource-group ${saplandscape_rg} | jq -r "'".[].addressSpace.addressPrefixes[0]"'")
      IFS=. sap_vnet_prefix_parts=(${saplandscape_sap_vnet_prefix##})
      sap_vnet_prefix_idx=${sap_vnet_prefix_parts[1]}
      unset IFS

      landscape_kv_arm_id=$(az keyvault list --resource-group ${saplandscape_rg} | jq -r "'".[] | select(.name | contains(\\\"user\\\")).id"'")
      landscape_kv_name=$(az keyvault list --resource-group ${saplandscape_rg} | jq -r "'".[] | select(.name | contains(\\\"user\\\")).name"'")
      sid_public_key_secret_name="${saplandscape_rg}-sid-sshkey-pub"

      # Modify environment value so it starts with u and with length of 5
      sapsystem_env=${{parameters.sapsystem_env}}
      sapsystem_isRelease=${sapsystem_env%%$buildId*}

      [ -z ${{parameters.osImage_publisher}} ] && osImage_publisher="SUSE" || osImage_publisher=${{parameters.osImage_publisher}}
      [[ ${osImage_publisher} == "SUSE" ]] && isSles=true || isSles=false

      # subnet is decided by buildId if it is unit test.
      if [ -z "${sapsystem_isRelease}" ]
      then 
        idx1=${buildId: -1}
        idx2=$((${buildId: -2:1} + 1))
        idx=$((10#$idx2$idx1))
        sapsystem_prefix="U$(echo $(Build.BuildId) | rev | cut -c1-4 | rev)"
        ha="false"
      else
        sapsystem_prefix=${sapsystem_env}
        ha="true"
        if ${isSles}
        then idx=8
        else idx=9
        fi
      fi

      subnet_admin_prefix="10.${sap_vnet_prefix_idx}.${idx}.0/27"
      subnet_db_prefix="10.${sap_vnet_prefix_idx}.${idx}.32/27"
      subnet_app_prefix="10.${sap_vnet_prefix_idx}.${idx}.96/27"

      sapsystem_rg="${sapsystem_prefix}-EAUS-SAP-PRD"
      sapland_rg="UNIT-EAUS-SAP0-INFRASTRUCTURE"

      # Store SPN in deployer KV
      echo "=== Store SPN in deployer KV ==="
      deployer_kv_name=$(az keyvault list --resource-group ${deployer_rg} | jq -r "'".[] | select(.name | contains(\\\"user\\\")).name"'")
      az keyvault secret set --vault-name ${deployer_kv_name} --name ${sapsystem_prefix}-client-id --value $(hana-pipeline-spn-id) --output none
      az keyvault secret set --vault-name ${deployer_kv_name} --name ${sapsystem_prefix}-client-secret --value $(hana-pipeline-spn-pw) --output none
      az keyvault secret set --vault-name ${deployer_kv_name} --name ${sapsystem_prefix}-subscription-id --value $(landscape-subscription) --output none
      az keyvault secret set --vault-name ${deployer_kv_name} --name ${sapsystem_prefix}-tenant-id --value $(landscape-tenant) --output none

      echo "=== Recovery SPN in deployer KV when rerun same build ==="
      az keyvault secret recover --vault-name ${deployer_kv_name} --name ${sapsystem_prefix}-client-id --output none
      az keyvault secret recover --vault-name ${deployer_kv_name} --name ${sapsystem_prefix}-client-secret --output none
      az keyvault secret recover --vault-name ${deployer_kv_name} --name ${sapsystem_prefix}-subscription-id --output none
      az keyvault secret recover --vault-name ${deployer_kv_name} --name ${sapsystem_prefix}-tenant-id --output none
      echo "=== Wait for 30s for secrets to be available === "
      sleep 30s

      # If no osImage provided, deploy SLES12SP5
      [ -z "${{parameters.osImage_offer}}" ] && osImage_offer="sles-sap-12-sp5" || osImage_offer=${{parameters.osImage_offer}}
      [ -z "${{parameters.osImage_publisher}}" ] && osImage_publisher="SUSE" || osImage_publisher=${{parameters.osImage_publisher}}
      [ -z "${{parameters.osImage_sku}}" ] && osImage_sku="gen1" || osImage_sku=${{parameters.osImage_sku}}
      
      repo_dir=$HOME/${sapsystem_rg}/sap-hana
      ws_dir=$HOME/Azure_SAP_Automated_Deployment/WORKSPACES/SAP_SYSTEM/${sapsystem_rg}
      deployer_ws_dir=$HOME/Azure_SAP_Automated_Deployment/WORKSPACES/LOCAL/${deployer_rg}
      input=${ws_dir}/${sapsystem_rg}.json

      echo "=== Checkout required branch ${{parameters.branch_name}} ==="
      if [ ! -d "${repo_dir}" ]
      then
        mkdir $HOME/${sapsystem_rg}; cd $_
        git clone https://github.com/Azure/sap-hana.git
      fi
      cd $repo_dir && git pull && git checkout ${{parameters.branch_name}}

      echo "=== Create workspace ${ws_dir} ==="
      mkdir -p ${ws_dir}; cd $_
      cp ${deployer_ws_dir}/ssh* .

      cat <<- EOF > export-clustering-sp-details.sh
        export SAP_HANA_FENCING_AGENT_SUBSCRIPTION_ID=$(landscape-subscription)
        export SAP_HANA_FENCING_AGENT_TENANT_ID=$(landscape-tenant)
        export SAP_HANA_FENCING_AGENT_CLIENT_ID=$(hana-pipeline-spn-id)
        export SAP_HANA_FENCING_AGENT_CLIENT_SECRET=$(hana-pipeline-spn-pw)
      EOF

      tfstate_sa_name=$(az storage account list --resource-group ${saplib_rg} | jq -r "'".[] |  select(.name | contains(\\\"tfstate\\\")).name"'")
      sap_system_key="${sapsystem_rg}.terraform.tfstate"
      deployer_tfstate_key="${deployer_rg}.terraform.tfstate"
      landscape_tfstate_key="${saplandscape_rg}.terraform.tfstate"
      saplib_tfstate_key=$(az storage blob list --account-name ${tfstate_sa_name} --container-name tfstate --only-show-errors | jq -r "'".[] | select(.name | contains(\\\"LIBRARY\\\")).name"'")
      tfstate_resource_id=$(az storage account list --resource-group ${saplib_rg} | jq -r "'".[] | select(.name | contains(\\\"tfstate\\\")).id"'")

      db_type=${{parameters.db_type}}
      [ -z "$db_type" ] && db="HANA" || db=${db_type}

      db_type=${{parameters.db_type}}
      [ -z "$db_type" ] && db="HANA" || db=${db_type}

      cp ${repo_dir}/deploy/terraform/run/sap_system/sapsystem.json ${ws_dir}/sapsystem.json
      cat ${ws_dir}/sapsystem.json \
      | jq --arg environment "${sapsystem_prefix}" .infrastructure.environment\ =\ \$environment \
      | jq --arg tfstate_resource_id "${tfstate_resource_id}" .tfstate_resource_id\ =\ \$tfstate_resource_id \
      | jq --arg deployer_tfstate_key "${deployer_tfstate_key}" .deployer_tfstate_key\ =\ \$deployer_tfstate_key \
      | jq --arg landscape_tfstate_key "${landscape_tfstate_key}" .landscape_tfstate_key\ =\ \$landscape_tfstate_key \
      | jq --arg subnet_admin_prefix "${subnet_admin_prefix}" .infrastructure.vnets.sap.subnet_admin.prefix\ =\ \$subnet_admin_prefix \
      | jq --arg subnet_db_prefix "${subnet_db_prefix}" .infrastructure.vnets.sap.subnet_db.prefix\ =\ \$subnet_db_prefix \
      | jq --arg subnet_app_prefix "${subnet_app_prefix}" .infrastructure.vnets.sap.subnet_app.prefix\ =\ \$subnet_app_prefix \
      | jq --arg db "${db}" .databases[].platform\ =\ \$db \
      | jq --arg ha "${ha}" .databases[].high_availability\ =\ \$ha \
      | jq --arg osImage_offer "${osImage_offer}" .databases[].os.offer\ =\ \$osImage_offer \
      | jq --arg osImage_publisher "${osImage_publisher}" .databases[].os.publisher\ =\ \$osImage_publisher \
      | jq --arg osImage_sku "${osImage_sku}" .databases[].os.sku\ =\ \$osImage_sku \
      | jq --arg db_systemdb_password "$(hana-pipeline-db-pwd)" .databases[].credentials.db_systemdb_password\ =\ \$db_systemdb_password \
      | jq --arg os_sidadm_password "$(hana-pipeline-os-pwd)" .databases[].credentials.os_sidadm_password\ =\ \$os_sidadm_password \
      | jq --arg os_sapadm_password "$(hana-pipeline-os-pwd)" .databases[].credentials.os_sapadm_password\ =\ \$os_sapadm_password \
      | jq --arg xsa_admin_password "$(hana-pipeline-db-pwd)" .databases[].credentials.xsa_admin_password\ =\ \$xsa_admin_password \
      | jq --arg cockpit_admin_password "$(hana-pipeline-db-pwd)" .databases[].credentials.cockpit_admin_password\ =\ \$cockpit_admin_password \
      | jq --arg ha_cluster_password "$(hana-pipeline-os-pwd)" .databases[].credentials.ha_cluster_password\ =\ \$ha_cluster_password \
      > ${input}

      cat ${input}

      echo "=== Deploy sap system from deployer with terraform ==="
      echo "=== This may take quite a while, please be patient ==="
      terraform -version
      terraform init -upgrade=true -force-copy \
        --backend-config "subscription_id=$(landscape-subscription)" \
        --backend-config "resource_group_name=${saplib_rg}" \
        --backend-config "storage_account_name=${tfstate_sa_name}" \
        --backend-config "container_name=tfstate" \
        --backend-config "key=${sap_system_key}" \
        ${repo_dir}/deploy/terraform/run/sap_system/
      terraform apply -auto-approve -var-file=${input} ${repo_dir}/deploy/terraform/run/sap_system/
      '
    displayName: "Deploy new sap system: Branch ${{parameters.branch_name}}"
    condition: or(succeededOrFailed(), always())
    env:
      ARM_CLIENT_ID: $(hana-pipeline-spn-id)
      ARM_CLIENT_SECRET: $(hana-pipeline-spn-pw)
      ARM_TENANT_ID: $(landscape-tenant)
      ARM_SUBSCRIPTION_ID: $(landscape-subscription)
